# This script, originally based on Mietta Lennes's
# <https://lennes.github.io/spect/scripts/collect_pitch_data_from_files.praat>,
# goes through sound and textgrid files in a directory,
# opens each pair of sound and textgrid, calculates the pitch maximum
# of each labeled interval, and saves results to a text file.
# It can be easily adapted for other and additional analyses.
# 2023-11-21 werner@iki.fi

form Analyze vowelFormants
	comment Which tier do you want to analyze?
	sentence Tier Segment
	comment Formant analysis parameters
	integer Maximum_number_of_formants 5
	positive Maximum_formant_(Hz) 5500(=adult female)
	positive Window_length_(s) 0.025
  comment Where to find sound and textgrid files
  sentence input_directory D:\UniversityofEasternFinland\SpeechTechnologyforspeechimpairmentresearch\Script\BB\WAV
	sentence sound_file_extension .WAV
	sentence TextGrid_file_extension .TextGrid
  comment Where to put results
  sentence Result_file D:\UniversityofEasternFinland\SpeechTechnologyforspeechimpairmentresearch\Script\BB\WAV formant.txt
endform

# Here, you make a listing of all the sound files in a directory.
fileList = Create Strings as file list: "Files in directory", input_directory$ +"/*" + sound_file_extension$

numberOfFiles = Get number of strings
writeInfoLine: newline$, numberOfFiles, " sound files found in ", input_directory$

# Write a row with column titles to the result file:

# (remember to edit this if you change or add to the analyses!)

titleline$ = "Filename" + tab$ + "Segment label" +  tab$ + "F1 (Hz)" + tab$ + "F2 (Hz)"
appendFileLine: result_file$, titleline$

# Go through all the sound files, one by one:

for i to numberOfFiles
	filename$ = Get string: i
	# A sound file is opened from the listing:
	sound = Read from file: input_directory$ + "/" + filename$
        soundname$ = selected$ ("Sound")
  # Starting here, you can list everything that should be done to all the files:

	# Open TextGrid by the same name:
	gridfile$ = input_directory$ + "/" + soundname$ + textGrid_file_extension$
	if fileReadable (gridfile$)
		tg = Read from file: gridfile$
		# Find the tier number that has the name given in the form:
		@getTier: tier$
		numberOfIntervals = Get number of intervals: getTier.number
		# Pass through all intervals in the selected tier:
		for interval to numberOfIntervals
			label$ = Get label of interval: getTier.number, interval
                        
			#perform actions only for vowels
		        if index(label$, "a") <> 0 or index(label$, "i") <> 0 or index(label$, "u") <> 0

				# if the interval has an unempty label, get its start and end:
				start = Get starting point: getTier.number, interval
				end = Get end point: getTier.number, interval
                                # get midinterval
                                midinterval = start + (end-start)/2
				# get the formant at that interval
				selectObject: sound
				myFormant = To Formant (burg): midinterval, 5, 5000, 0.025, 50
			nPoints= Get number of frames
			for point to nPoints
				selectObject: myFormant
				time = Get time from frame number: point
				f1 = Get value at time: 1, time, "Hertz", "Linear"
				f2 = Get value at time: 2, time, "Hertz", "Linear"
				f1$ = fixed$(f1, 0)
				f2$ = fixed$(f2, 0)
				# Save result to text file:
				resultline$ = soundname$ + tab$ + label$ +  tab$ + fixed$(f1, 0) + tab$ + fixed$(f2, 0)
				appendFileLine: result_file$, resultline$
				selectObject: tg
endfor
endif
		endfor
		# Remove the TextGrid object from the object list
		selectObject: tg
		Remove
	endif
	# Remove the other temporary objects from the object list
	selectObject: sound
	plusObject: myFormant
	Remove
	selectObject: fileList
	# and go on with the next sound file!
endfor

Remove

appendInfoLine: newline$, "Finished!"
appendInfoLine: newline$, "The analysis results were saved to: ", result_file$


#-------------
# This procedure finds the number of a tier that has a given name.

procedure getTier: .tiername$
        numberOfTiers = Get number of tiers
        current_tier = 1
        .number = 0
        repeat
                tryTier$ = Get tier name: current_tier
                current_tier = current_tier + 1
        until tryTier$ = tier$ or current_tier > numberOfTiers
        if tryTier$ <> tier$
                .number = 0
        else
                .number = current_tier - 1
        endif

	if .number = 0
		exitScript: "The tier called ",  tier$,  " is missing from the file ",  soundname$, "!"
	endif

endproc